<?php

namespace Neoan3\Component\Article;

use Neoan3\Apps\Ops;
use Neoan3\Core\RouteException;
use Neoan3\Frame\BluaBlue;
use Neoan3\Model\Article\ArticleModel;
use Neoan3\Model\Article\ArticleModelWrapper;
use Neoan3\Provider\Auth\Authorization;
use Neoan3\Provider\Model\InitModel;

/**
 * Class ArticleController
 * @package Neoan3\Component\Article
 *
 * Generated by neoan3-cli for neoan3 v3.*
 */

class ArticleController extends BluaBlue {
    /**
     * Route: Article
     */
    #[InitModel(ArticleModel::class)]
    function init(): void
    {
        $article = [];
        if(sub(1)){
            $articles = ArticleModel::find(['slug'=> sub(1)]);
            if(!empty($articles)){
                $article = $articles[0];

            } else {
                redirect('404');
            }
        }

        $this->renderer->includeElement('Article');
        $this->hook('main', 'article', [
            'article'=> $article,
            'contents' => $article['article_content'],
            'suggestions'=>$this->getSuggestions($article),
            'seo'=>$this->seo($article)
        ]);
        $this->renderer->hooks['seo'] = json_encode($this->seo($article));
        $this->output();
    }

    /**
     * @throws RouteException
     */
    #[InitModel(ArticleModel::class)]
    function getArticle($modus = 'Newest', $identifier = null)
    {
        if($modus === 'Newest'){
            return $this->lastThirty();
        } elseif($modus === 'Slug' && $identifier) {
            return $this->bySlug($identifier);
        } elseif($modus === 'Id' && $identifier) {
            return ArticleModel::get($identifier);
        } elseif ($modus === 'Keyword' && $identifier){
            return ArticleModel::find([
                'keywords'=>'%'.$identifier.'%',
                'publish_date'=>'!',
                'is_public'=>1,
                '^delete_date'
            ],['orderBy'=>['insert_date','desc'],'limit'=>[0,300]]);
        } elseif ($modus === 'Mine'){
            $auth = $this->Auth->validate();
            $scope = $auth->getScope();
            $expression = [
                'author_user_id'=>'$'. $auth->getUserId(),
                '^delete_date'
            ];
            if(!in_array('read.profile',$scope)){
                $expression['publish_date'] = '!';
            }
            return ArticleModel::find($expression);
        }
        return [];
    }

    /**
     * @throws RouteException
     */
    private function bySlug($slug): array
    {
        $result =  ArticleModel::find(['slug'=> Ops::toKebabCase($slug)]);
        if(empty($result)){
            return [];
        }
        $article = $result[0];
        $scope = [];
        try{
            $this->Auth->validate();
            $scope = $this->authObject->getScope();
        } catch (RouteException $e){
            if(!$article['is_public']||!$article['publish_date']){
                throw new RouteException('unauthorized',401);
            }
        }
        // unpublished
        if(!$article['publish_date'] && $article['author_user_id'] !== $this->authObject->getUserId()){
            throw new RouteException('unauthorized',401);
        } elseif (!$article['publish_date'] && !in_array('read.profile', $scope)){
            throw new RouteException('unauthorized',401);
        }
        return $article;
    }

    #[InitModel(ArticleModel::class)]
    private function lastThirty()
    {
        return ArticleModel::find(['publish_date'=>'!','is_public'=>1, '^delete_date'],['orderBy'=>['insert_date','desc'],'limit'=>[0,30]]);
    }

    #[InitModel(ArticleModel::class)]
    private function getSuggestions($article): array
    {
        $results = [];
        if(empty($article)){
            return $results;
        }
        $keywords = explode(',', $article['keywords']);
        $passIn = [];
        $string = '';
        $alpha = 'abcdefghijklmnop';
        foreach ($keywords as $i =>  $keyword){
             $key = $alpha[$i];
             $passIn[$key] = "%$keyword%";
             $string .= ($i > 0 ? ' OR ': ' '). 'keywords LIKE {{' .$key .'}}';
        }

        $sql = "> SELECT id FROM article WHERE id != UNHEX('{$article['id']}') AND (" . $string . ') AND is_public = 1 AND publish_date IS NOT NULL ORDER BY publish_date DESC LIMIT 10';
        try{
            $ids = $this->provider['db']->smart($sql, $passIn);
            foreach ($ids as $id){
                $results[] = ArticleModel::get($id['id']);
            }
        }catch (\Exception $e){
            var_dump($e->getMessage());
        }

        return $results;
    }
    #[Authorization('restrict',['all'])]
    #[InitModel(ArticleModel::class)]
    public function putArticle($article): array
    {
        // user is owner?
        if($this->authObject->getUserId() !== $article['author_user_id']){
            throw new RouteException('ownership issue', 401);
        }
        $wrapper = new ArticleModelWrapper($article);
        $wrapper->setUpdateDate('.')->store('update');
        $this->processWebhooks();
        return $wrapper->toArray();
    }

    #[Authorization('restrict',['all'])]
    #[InitModel(ArticleModel::class)]
    public function postArticle($body)
    {
        $wrapper = new ArticleModelWrapper($body);
        if(empty(ArticleModel::find(['slug'=>Ops::toKebabCase($wrapper->getName())]))){
            $wrapper->setSlug(Ops::toKebabCase($wrapper->getName()));
        }
        $wrapper->setAuthorUserId($this->authObject->getUserId());
        return $wrapper->store()->toArray();
    }

    private function processWebhooks()
    {

    }

    private function seo($article): array
    {
        $seo =  [
            '@context'      => 'https://schema.org/',
            '@type'         => 'article',
            'name'          => $article['name'],
            'description'   => $article['teaser'],
            'author'        => $article['author']['user_name'],
            'keywords'      => $article['keywords'],
            'datePublished' => substr($article['insert_date'], 0, 10),
            'headline'      => $article['name'],
            'publisher'     => [
                '@type' => 'Organization',
                'name'  => 'blua.blue',
                'url'   => base,
                'logo'  => ['@type' => 'imageObject', 'url' => base . 'asset/img/blua-blue-logo.png']
            ]
        ];
        if(isset($article['image'])){
            $seo['image'] = base . $article['image']['path'];
        }
        return $seo;
    }

}
