<?php

namespace Neoan3\Component\Article;

use Neoan3\Apps\Curl;
use Neoan3\Apps\CurlException;
use Neoan3\Apps\Ops;
use Neoan3\Core\Event;
use Neoan3\Core\RouteException;
use Neoan3\Frame\BluaBlue;
use Neoan3\Model\Article\ArticleModel;
use Neoan3\Model\Article\ArticleModelWrapper;
use Neoan3\Model\Webhook\WebhookModel;
use Neoan3\Provider\Auth\Authorization;
use Neoan3\Provider\Model\InitModel;

/**
 * Class ArticleController
 * @package Neoan3\Component\Article
 *
 * Generated by neoan3-cli for neoan3 v3.*
 */
class ArticleController extends BluaBlue
{
    /**
     * Route: Article
     */
    #[InitModel(ArticleModel::class)]
    function init(): void
    {
        $article = [];
        if (sub(1)) {
            $articles = ArticleModel::find(['^delete_date', 'slug' => sub(1)]);
            if (!empty($articles)) {
                $article = $articles[0];
                $this->setTitle($article['name']);
            } else {
                redirect('404');
            }
        }

        $this->renderer->includeElement('Article');
        $this->hook('main', 'article', [
            'article' => $article,
            'contents' => $article['article_content'],
            'suggestions' => $this->getSuggestions($article),
        ]);
        $this->hook('seo', 'seo', ['json' => json_encode($this->seo($article))]);
        $this->output();
    }

    /**
     * @throws RouteException
     */
    #[InitModel(ArticleModel::class)]
    function getArticle($modus = 'Newest', $identifier = null)
    {
        if ($modus === 'Newest') {
            return $this->lastThirty();
        } elseif ($modus === 'Slug' && $identifier) {
            $article = $this->bySlug($identifier);
            if(empty($article)){
                throw new RouteException('Not found', 404);
            }
            return $article;
        } elseif ($modus === 'Id' && $identifier) {
            $article = ArticleModel::get($identifier);
            if(empty($article)){
                throw new RouteException('Not found or no access', 404);
            }
            return $article;
        } elseif ($modus === 'Keyword' && $identifier) {
            return ArticleModel::find([
                'keywords' => '%' . implode('%', explode(',', $identifier)) . '%',
                'publish_date' => '!',
                'is_public' => 1,
                '^delete_date'
            ], ['orderBy' => ['insert_date', 'desc'], 'limit' => [$_GET['from'] ?? 0, 300]]);
        } elseif ($modus === 'Mine') {
            $auth = $this->Auth->validate();
            $scope = $auth->getScope();
            $expression = [
                'author_user_id' => '$' . $auth->getUserId(),
                '^delete_date'
            ];
            if (!in_array('read.profile', $scope)) {
                $expression['publish_date'] = '!';
            }
            return ArticleModel::find($expression);
        }
        return [];
    }

    /**
     * @throws RouteException
     */
    private function bySlug($slug): array
    {
        $result = ArticleModel::find(['slug' => Ops::toKebabCase($slug)]);
        if (empty($result)) {
            return [];
        }
        $article = $result[0];
        $scope = [];
        try {
            $auth = $this->Auth->validate();
            $scope = $auth->getScope();
        } catch (RouteException $e) {
            if (!$article['is_public'] || !$article['publish_date']) {
                throw new RouteException('unauthorized', 401);
            }
        }
        // unpublished
        if (!$article['publish_date'] && $article['author_user_id'] !== $auth->getUserId()) {
            throw new RouteException('unauthorized', 401);
        } elseif (!$article['publish_date'] && !in_array('read.profile', $scope)) {
            throw new RouteException('unauthorized', 401);
        }
        return $article;
    }

    #[InitModel(ArticleModel::class)]
    private function lastThirty()
    {
        return ArticleModel::find(['publish_date' => '!', 'is_public' => 1, '^delete_date'], ['orderBy' => ['insert_date', 'desc'], 'limit' => [0, 30]]);
    }

    #[InitModel(ArticleModel::class)]
    private function getSuggestions($article): array
    {
        $results = [];
        if (empty($article)) {
            return $results;
        }
        $keywords = explode(',', $article['keywords']);
        $passIn = [];
        $string = '';
        $alpha = 'abcdefghijklmnop';
        foreach ($keywords as $i => $keyword) {
            $key = $alpha[$i];
            $passIn[$key] = "%$keyword%";
            $string .= ($i > 0 ? ' OR ' : ' ') . 'keywords LIKE {{' . $key . '}}';
        }

        $sql = "> SELECT id FROM article WHERE id != UNHEX('{$article['id']}') AND (" . $string . ') AND is_public = 1 AND publish_date IS NOT NULL ORDER BY publish_date DESC LIMIT 10';
        try {
            $ids = $this->provider['db']->smart($sql, $passIn);
            foreach ($ids as $id) {
                $results[] = ArticleModel::get($id['id']);
            }
        } catch (\Exception $e) {
            var_dump($e->getMessage());
        }

        return $results;
    }

    #[Authorization('restrict', ['all'])]
    #[InitModel(ArticleModel::class)]
    public function putArticle($article): array
    {
        $definedWebhooks = $article['webhooks'] ?? null;
        // user is owner?
        if ($this->authObject->getUserId() !== $article['author_user_id']) {
            throw new RouteException('ownership issue', 401);
        }
        $wrapper = new ArticleModelWrapper($article);
        $wrapper->setUpdateDate('.')->store('update');
        $this->processWebhooks('updated', $wrapper, $definedWebhooks);
        return $wrapper->toArray();
    }

    /**
     * @throws RouteException
     */
    #[Authorization('restrict', ['all'])]
    #[InitModel(ArticleModel::class)]
    public function postArticle($body): array
    {
        $definedWebhooks = $body['webhooks'] ?? null;
        $wrapper = new ArticleModelWrapper($body);
        // necessary
        if (!$wrapper->getCategoryId()) {
            throw new RouteException('Missing property "category_id"', 406);
        }
        if (empty(ArticleModel::find(['slug' => Ops::toKebabCase($wrapper->getName())]))) {
            $wrapper->setSlug(Ops::toKebabCase($wrapper->getName()));
        }
        $wrapper->setAuthorUserId($this->authObject->getUserId())->store();
        $this->processWebhooks('created', $wrapper, $definedWebhooks);
        return $wrapper->toArray();
    }

    /**
     * @throws RouteException
     */
    #[Authorization('restrict', ['all'])]
    #[InitModel(ArticleModel::class)]
    public function deleteArticle($id, $params = [])
    {
        // user is owner?
        $article = ArticleModel::get($id);
        if (empty($article) || $this->authObject->getUserId() !== $article['author_user_id']) {
            throw new RouteException('ownership issue', 401);
        }
        $this->processWebhooks('deleted', $article);
        return ArticleModel::delete($id, false);
    }

    private function processWebhooks($event, ArticleModelWrapper $article, $definedWebhooks = null): array
    {
        if ($definedWebhooks) {
            $webhooks = array_filter($definedWebhooks, fn($item) => $item['active']);
        } else {
            $this->loadModel(WebhookModel::class);
            $webhooks = WebhookModel::find(['^delete_date', 'user_id' => '$' . $this->authObject->getUserId()]);
        }

        $answers = [];
        foreach ($webhooks as $webhook) {
            $auth = empty($webhook['token']) ? false : $webhook['token'];
            $webhookCall = $this->attachPlugins($webhook, ['event' => $event, 'payload' => $article->toArray(), 'token'=> $auth]);
            if (!$webhookCall) {
                try {
                    $webhookCall = Curl::post($webhook['target_url'], ['event' => $event, 'payload' => $article->toArray()], $auth);
                } catch (CurlException | \Exception $e) {
                    $webhookCall = $e->getMessage();
                }
            }

            $answers[] = [
                'id' => $webhook['id'],
                'result' => $webhookCall
            ];
        }
        return $answers;
    }

    private function attachPlugins($webhook, $ev): mixed
    {
        if (str_starts_with($webhook['target_url'], 'Plugin::')) {
            $parts = explode('::', $webhook['target_url']);
            $class = "\\Neoan3\\Component\\" . $parts[1] . "\\" . $parts[1] . "Controller";
            $constructor = new $class();
            $answer = false;
            // for asynchronous design & debugging
            Event::listen($webhook['target_url']."::out", function($result) use ($answer){
                $answer = $result;
            });
            Event::dispatch($webhook['target_url'], $ev);
            return $answer;
        }
        return false;
    }

    private function seo($article): array
    {
        $seo = [
            '@context' => 'https://schema.org/',
            '@type' => 'article',
            'name' => $article['name'],
            'description' => $article['teaser'],
            'author' => $article['author']['user_name'],
            'keywords' => $article['keywords'],
            'datePublished' => substr($article['insert_date'], 0, 10),
            'headline' => $article['name'],
            'publisher' => [
                '@type' => 'Organization',
                'name' => 'blua.blue',
                'url' => base,
                'logo' => ['@type' => 'imageObject', 'url' => base . 'asset/img/blua-blue-logo.png']
            ]
        ];
        if (isset($article['image'])) {
            $seo['image'] = base . $article['image']['path'];
        }
        return $seo;
    }

}
