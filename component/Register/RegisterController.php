<?php

namespace Neoan3\Component\Register;

use Mailjet\Resources;
use Neoan3\Apps\Ops;
use Neoan3\Apps\Template;
use Neoan3\Frame\BluaBlue;
use Neoan3\Model\User\UserModel;
use Neoan3\Model\User\UserModelWrapper;
use Neoan3\Provider\Model\InitModel;

/**
 * Class RegisterController
 * @package Neoan3\Component\Register
 *
 * Generated by neoan3-cli for neoan3 v3.*
 */
class RegisterController extends BluaBlue
{
    /**
     * Route: Register
     */
    function init(): void
    {
        $this->renderer->includeElement('Register');
        $this->hook('main', 'register', []);
        $this->output();
    }

    /**
     * @throws \Exception
     */
    #[InitModel(UserModel::class)]
    function postRegister($body): array
    {
        // bot?
        $this->honeyPot($body['code']);
        $response = ['error' => false];
        // unique user & email?
        if (!empty(UserModel::find(['user_name' => $body['user_name']]))) {
            $response['error'] = 'Username taken';
        }
        if (!empty(UserModel::find(['user_email.email' => $body['email']]))) {
            $response['error'] = 'You cannot register';
        }
        if ($response['error']) {
            return $response;
        }
        // create user
        $pin = Ops::pin();
        $newUser = new UserModelWrapper($body);
        $newUser
            ->setUserType('user')
            ->addUserEmail(['email' => $body['email'], 'confirm_code' => $pin])
            ->addUserPassword(['password' => '=' . password_hash($body['password'], PASSWORD_DEFAULT), 'confirm_date' => '.'])
            ->store();
        // send email
        $content = Template::embrace(
            '<h3>Welcome to blua.blue</h3><p>To verify your account, please use the code: {{pin}} <br/> <a href="{{link}}">here</a></p>',
            ['link' => base . 'register?email=' . $body['email'], 'pin' => $pin]
        );

        $response = $this->standardMail($body['email'], $body['user_name'], "Thank you for signing up", $content);
        if ($response->success()) {
            return ['error' => false];
        }
        return ['error' => 'Error while delivering email! Please check your email address.'];


    }

    #[InitModel(UserModel::class)]
    function putRegister($body): array
    {
        $user = UserModel::find(['user_email.email' => $body['email']]);
        if (!empty($user) && $user[0]['user_email'][0]['confirm_code'] === $body['confirm_code']) {
            $user[0]['user_email'][0]['confirm_date'] = '.';
            $user[0]['user_email'][0]['confirm_code'] = Ops::randomString(30);
            UserModel::update($user[0]);
            return ['verified' => true];
        }
        return ['verified' => false];
    }

}
