<?php

namespace Neoan3\Component\Auth;

use Neoan3\Apps\Ops;
use Neoan3\Core\Renderer;
use Neoan3\Core\RouteException;
use Neoan3\Frame\BluaBlue;
use Neoan3\Model\Api\ApiModel;
use Neoan3\Model\User\UserModel;
use Neoan3\Provider\Auth\Auth;
use Neoan3\Provider\Auth\AuthObjectDeclaration;
use Neoan3\Provider\Auth\Authorization;
use Neoan3\Provider\Auth\JwtWrapper;
use Neoan3\Provider\Model\InitModel;
use Neoan3\Provider\MySql\Database;
use \Exception;

/**
 * Class AuthController
 * @package Neoan3\Component\Auth
 *
 * Generated by neoan3-cli for neoan3 v3.*
 */

class AuthController extends BluaBlue {


    /**
     * Route: Auth
     */
    function init(): void
    {
        if(isset($_GET['redirect'])){
            $this->renderer->includeElement('Auth');
            $this->hook('main', 'auth', [])->output();
        } else {
            redirect('');
        }

    }
    function getAuth($scope=null): mixed
    {
        try{
            $user = $this->Auth->validate();
            $token = $user->getToken();
            if($scope){
                $wrapper = $this->createJWTWrapper();
                $jwt = $wrapper->assign($user->getUserId(),explode(',', $scope),$user->getPayload());
                $token = $jwt->getToken();
            }

            return [['user'=> $user->getPayload(),'token'=>$token]];
        } catch (RouteException | Exception $e){
            return [];
        }


    }

    /**
     * @throws RouteException
     */
    function postAuth($body)
    {
        try{
            $this->honeyPot($body['code']);
            $user =  $this->loadModel(UserModel::class)::login($body);
            $auth = $this->Auth->assign($user['id'],explode(',','all,read,read.profile,read.articles,read.articles.owned'), $user);
            return ['token' => $auth->getToken(), 'user' => $user, 'session' => $_SESSION ?? null];
        } catch (\Exception $e){
            throw new RouteException('error',500);
        }

    }

    /**
     * @throws RouteException
     * @throws Exception
     */
    function apiLogin($apiKey, $id)
    {
        $keys = $this->db->easy('api.*',['id' => '$' . $id,'^delete_date']);
        if(!empty($keys)){
            foreach ($keys as $key){
                try{
                    $decoded = Ops::decrypt($key['api_key'], $apiKey);
                    if($decoded === $apiKey){
                        $auth = $this->Auth->assign($key['user_id'],explode(',',$key['scope']), [
                            'apiId' => $key['id']
                        ]);
                        return ['token'=>$auth->getToken()];
                    }
                } catch (\Exception $e){

                }

            }
        }
        throw new RouteException('unauthorized', 401);
    }

    /**
     * @throws RouteException
     */
    #[Authorization('restrict')]
    #[InitModel(UserModel::class)]
    function putAuth($body)
    {
        if($body['id'] !== $this->authObject->getUserId() && $this->authObject->getPayload()['user_type'] !== 'admin'){
            throw new RouteException('unauthenticated', 401);
        }
        unset($body['articles']);
        unset($body['image']);
        return UserModel::update($body);
    }

    function deleteAuth()
    {
        $this->provider['auth']->logout();
        return ['url' => $this->provider['auth']->logoutUrl];
    }
}
