<?php

namespace Neoan3\Component\Medium;

use League\HTMLToMarkdown\HtmlConverter;
use Neoan3\Apps\Curl;
use Neoan3\Apps\Ops;
use Neoan3\Core\Event;
use Neoan3\Core\RouteException;
use Neoan3\Frame\BluaBlue;
use Neoan3\Model\Image\ImageModel;
use Neoan3\Provider\Auth\Auth;
use Neoan3\Provider\Auth\Authorization;
use Neoan3\Provider\MySql\Database;

/**
 * Class MediumController
 * @package Neoan3\Component\Medium
 *
 * Generated by neoan3-cli for neoan3 v3.*
 */

class MediumController extends BluaBlue {

    private string $apiKey;

    public function __construct(Database $db = null, Auth $auth = null, $bypass = false)
    {
        parent::__construct($db, $auth, $bypass);
        Event::listen('Plugin::DevTo', function ($ev){
            $result = $this->process($ev);
            Event::dispatch('Plugin::DevTo::out',$result);
        });
    }

    /**
     * Route: Medium
     */
    function init(): void
    {
        $this->renderer->includeElement('Medium');
        $this->hook('main', 'medium', []);
        $this->output();
    }
    #[Authorization('restrict',['all'])]
    function getMedium(string $apiKey, $params=[])
    {
        $this->apiKey = $apiKey;
        $header = $this->curlHeader();
        $testAnswer = Curl::curling('https://api.medium.com/v1/me',[],$header, 'GET');
        if(isset($testAnswer['errors'])){
            throw new RouteException('API-error:'.$testAnswer['errors'][0]['message'],400);
        }
        $credentials = getCredentials();
        $key = $credentials['blua_stateless']['secret'];
        $encrypted = Ops::serialize(Ops::encrypt($apiKey, $key));
        return ['token' => $encrypted, 'test' => $testAnswer];
    }

    /**
     * @throws RouteException
     */
    function process(array $article)
    {
        $this->secure($article['token']);
        $info = null;
        switch ($article['event']) {
            case 'created':
            case 'updated':
                // find existing
                $update = $this->investigateStoreObject($article['payload']['article_store']);
                $body = $this->transformPayload($article['payload']);
                $info = $this->sendToDevTo($article['payload']['id'], $devBody, $update);
                break;
            case 'deleted':
                break;
        }
        return ['webhook' => 'received', 'info' => $info];
    }

    /**
     * @throws RouteException
     */
    private function secure($token)
    {
        try{
            $salt = getCredentials()['blua_stateless']['secret'];
            $this->apiKey = Ops::decrypt(Ops::deserialize($token), $salt);
        } catch (\Exception $e) {
            throw new RouteException('Issue', 500);
        }

    }
    /**
     * @param $store
     *
     * @return bool
     */
    private function investigateStoreObject($store): mixed
    {
        foreach ($store as $possible) {
            if ($possible['store_key'] === 'medium-id') {
                return $possible['value'];
            }
        }
        return false;
    }

    private function curlHeader(): array
    {
        return [
            'User-Agent: neoan3',
            'Content-Type: application/json',
            'Authorization: Bearer ' . $this->apiKey
        ];
    }

    private function transformPayload(mixed $payload): array
    {
        $isLocal = str_contains(base, 'localhost');
        $article = [
            'title'         => $payload['name'],
            'contentFormat' => 'markdown',
            'tags'          => explode(',', $payload['keywords']),
            'description'   => $payload['teaser'],
            'publishStatus' => $payload['publish_date'] ? 'public' : 'draft',
            'content' => $this->prepareContent($payload),
            'notifyFollowers' => true
        ];

        if (!$isLocal&&$payload['is_public']) {
            $article['canonicalUrl'] = base . 'article/' . $payload['slug'] . '/';
        }
        return $article;
    }
    private function prepareContent($payload): string
    {
        $full = '# '. $payload['name'] . " \n";
        if ($payload['image_id']) {
            $image = $this->loadModel(ImageModel::class)::get($payload['image_id']);
            $full .= '![' . $payload['name'] .'](' (!str_starts_with($image['path'], 'http') ? base : '') . $image['path'] . ")\n";
        }
        $converter = new HtmlConverter(['strip_tags' => true]);
        foreach ($payload['article_content'] as $content){
            $full .= match ($content['content_type']) {
                'markdown' => $content['content'] . "\n",
                default =>  $converter->convert($content['html']) . "\n"
            };
        }
        return $full;

    }

}
