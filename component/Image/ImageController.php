<?php

namespace Neoan3\Component\Image;

use JetBrains\PhpStorm\ArrayShape;
use Neoan3\Apps\Ops;
use Neoan3\Core\RouteException;
use Neoan3\Frame\BluaBlue;
use Neoan3\Model\Article\ArticleModel;
use Neoan3\Model\Image\ImageModel;
use Neoan3\Provider\Auth\Authorization;
use Neoan3\Provider\Model\InitModel;

/**
 * Class ImageController
 * @package Neoan3\Component\Image
 *
 * Generated by neoan3-cli for neoan3 v3.*
 */
class ImageController extends BluaBlue
{
    /**
     * Route: Image
     */
    function init(): void
    {
        $this->renderer->includeElement('Image');
        $this->hook('main', 'image', []);
        $this->output();
    }

    #[Authorization('restrict',['read.profile'])]
    #[InitModel(ImageModel::class)]
    function getImage($params = [])
    {
        $images = ImageModel::find([
            'inserter_user_id' => '$' . $this->authObject->getUserId(),
            '^delete_date'
        ], ['orderBy' => ['insert_date', 'desc']]);
        if (isset($params['action'])) {
            if ($params['action'] === 'files') {
                // format for jodit
                $joditReturn = [];
                foreach ($images as $image) {
                    $joditReturn[] = $image['path'];
                }
                return [
                    'success' => true,
                    'data' => [
                        'sources' => [
                            'bluaDrive' => [
                                'files' => array_map(function($item){
                                    return ['file'=>$item];
                                },$joditReturn),
                                'baseurl' => base
                            ]
                        ]
                    ],
                    'code'=>220
                ];
            } elseif ($params['action'] === 'permissions') {
                return [
                    'success' => true,
                    'data' => [
                        'permissions' => [
                            'allowFiles' => true,
                            'allowFolders' => false,
                            'allowFileMove' => false,
                            'allowFileUpload' => false,
                            'allowFileUploadRemote' => false,
                            'allowFileRemove' => false,
                            'allowImageResize' => false,
                            'allowImageCrop' => false,
                        ]
                    ],
                    'code'=>220
                ];
            } else {
                return [
                    'success' => true,
                    'data' => [
                        'sources' => [
                            'bluaDrive' => [
                                'baseurl'=> path . '/asset/upload/' . $this->authObject->getUserId() . '/',
                                'path'=>'',
                                'folders'=> ['.']
                            ]
                        ]
                    ],
                    'code' =>220
                ];
            }

        }
        return $images;
    }

    /**
     * @throws RouteException
     */
    #[Authorization('restrict',['all'])]
    #[InitModel(ImageModel::class)]
    function postImage($body=[])
    {
        $userId = $this->authObject->getUserId();
        $format = '';
        $absolutePath = '';
        if(!in_array($body['mode'],['upload','external'])){
            throw new RouteException('Malformed', 400);
        }
        if($body['mode'] === 'upload'){

            preg_match('/data:([a-z\/]+);base64,/', $body['image'], $matches);
            $format = $matches[1];
            $newImageRaw = substr($body['image'], strlen($matches[0]));
            $decodedImage = base64_decode($newImageRaw);
            $sizeInKb = strlen($decodedImage)/1024;
            if($sizeInKb>400){
                throw new RouteException('Too big', 413);
            }

            $directory = path . '/asset/upload/' . $userId;
            if (!is_dir(path . '/asset/upload/')) {
                mkdir(path . '/asset/upload/', 0755);
            }
            if (!is_dir($directory)) {
                mkdir($directory, 0755);
            }
            $fileType = explode('/', $matches[1]);
            $path = '/' . Ops::randomString(22) . '.' . end($fileType);
            file_put_contents($directory . $path, $decodedImage);
            $absolutePath = base . '/asset/upload/' . $userId . $path;
        } elseif ($body['mode'] === 'external'){
            $dots = explode('.', $body['image']);
            $format = 'image/' . end($dots);
            $absolutePath = $body['image'];
        }

        // insert into db
        return ImageModel::create([
            'format' => $format,
            'path' => $absolutePath,
            'inserter_user_id' => $userId
        ]);


    }

    /**
     * @throws RouteException
     */
    #[Authorization('restrict',['all'])]
    #[InitModel(ImageModel::class)]
    #[InitModel(ArticleModel::class)]
    function deleteImage($id=null): array
    {
        // own image!!!
        $existing = ImageModel::get($id);

        if(empty($existing) || $existing['inserter_user_id'] !== $this->authObject->getUserId()){
            throw new RouteException('unauthorized', 401);
        }
        // delete local file
        if(str_contains($existing['path'],base)){
            unlink($existing['path']);
        }
        ImageModel::delete($id, true);

        // ramification-check
        ArticleModel::cleanUpImage($this->authObject->getUserId(),$id, $existing['path']);
        return ['delete'=>'happened'];

    }

}
