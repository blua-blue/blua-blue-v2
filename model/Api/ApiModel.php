<?php
/* Generated by neoan3-cli */

namespace Neoan3\Model\Api;

use Neoan3\Provider\MySql\Database;
use Neoan3\Provider\Model\Model;
use Neoan3\Provider\MySql\Transform;

/**
 * Class ApiModel
 * @package Neoan3\Model\Api
 * @method static get(string $id)
 * @method static create(array $modelArray)
 * @method static update(array $modelArray)
 * @method static find(array $conditionArray, array $callFunctions = [])
 * @method static delete(string $id, bool $hard = false)
 */

class ApiModel implements Model{

    /**
     * @var Database|null
     */
    private static ?Database $db = null;

    /**
     * @param $method
     * @param $args
     * @return mixed
     */
    public static function __callStatic($method, $args)
    {
        if(!method_exists(self::class, $method)){
            $transform = new Transform('api', self::$db);
            return self::outgoing($transform->$method(...$args));
        } else {
            return self::$method(...$args);
        }
    }

    public static function outgoing($result)
    {
        if(empty($result)){
            return $result;
        }
        if(isset($result['id'])){
            unset($result['api_key']);
        } elseif(isset($result[0]['id'])) {
            foreach ($result as $i => $item){
                $result[$i] = self::outgoing($item);
            }
        }
        return $result;
    }

    /**
     * @param array $providers
     */
    public static function init(array $providers)
    {
        foreach ($providers as $key => $provider){
            if($key === 'db'){
                self::$db = $provider;
            }
        }
    }

}