<?php
/* Generated by neoan3-cli */

namespace Neoan3\Model\User;

use Neoan3\Core\RouteException;
use Neoan3\Provider\Model\InitProvider;
use Neoan3\Provider\Model\Model;
use Neoan3\Provider\MySql\Database;
use Neoan3\Provider\MySql\DatabaseWrapper;
use Neoan3\Provider\MySql\Transform;

/**
 * Class UserModel
 * @package Neoan3\Model\User
 * @method static get(string $id)
 * @method static create(array $modelArray)
 * @method static update(array $modelArray)
 * @method static find(array $conditionArray, array $callFunctions = [])
 * @method static delete(string $id, bool $hard = false)
 */
class UserModel implements Model
{

    use InitProvider;

    /**
     * @var Database
     */
    private static DatabaseWrapper $db;

    /**
     * @param $method
     * @param $args
     * @return mixed
     */
    public static function __callStatic($method, $args)
    {
        if (!method_exists(self::class, $method)) {
            $transform = new Transform('user', self::$db);
            return self::outgoing($transform->$method(...$args));
        } else {
            return self::$method(...$args);
        }
    }

    private static function outgoing($result)
    {
        if (isset($result['id'])) {
            return self::sanatize($result);
        } else {
            foreach ($result as $i => $item){
                $result[$i] = self::sanatize($item);
            }
        }
        return $result;
    }

    private static function sanatize($entity)
    {
        unset($entity['user_password']);
        if($entity['image_id']){
            $image = self::$db->easy('image.*', ['id' => '$' . $entity['image_id']]);
            if(empty($image)){
                // image has been deleted! clear!
                self::$db->smart('user',['image_id'=>null],['id'=> '$'.$entity['id']]);
                $entity['image_id'] = null;
            } else {
                $entity['image'] = $image[0];
            }


        }

        return $entity;
    }

    /**
     * @throws RouteException
     * @throws \Exception
     */
    public static function login($credentials)
    {
        $selector = 'id';
        if (isset($credentials['email'])) {
            $selector = 'user_id';
            $user = self::$db->easy('user_email.user_id', ['email' => $credentials['email'],'^delete_date','confirm_date'=>'!']);
        } else {
            $user = self::$db->easy('user.id', ['user_name' => $credentials['userName'],'^delete_date']);
        }
        if (empty($user)) {
            throw new RouteException('Unauthorized', 401);
        }
        $user = $user[0];
        // authenticate
        $password = self::$db->easy('user_password.password', ['user_id' => '$' . $user[$selector], '^delete_date']);
        if (empty($password)) {
            throw new RouteException('No valid login', 422);
        }

        $verify = password_verify($credentials['password'], $password[0]['password']);
        if (!$verify) {
            throw new RouteException('Unauthorized', 401);
        }

        return self::get($user[$selector]);
    }


}