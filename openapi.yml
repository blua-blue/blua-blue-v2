openapi: "3.0.0"
info:
  version: 1.0.0
  title: Blue.blue REST API
  description: As we keep expanding on our SDKs, feel free to directly use our API. Please read our fair usage statement.
  license:
    name: MIT
servers:
  - url: https://blua.blue/api.v1


paths:
  /auth/{publicKey}:
    post:
      tags:
        - Authentication
      summary: Retrieves JWT token required for all other endpoints
      parameters:
        - name: publicKey
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKey:
                  type: string
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '201':
          $ref: '#/components/responses/201Error'

  /article:

    get:
      tags:
        - Articles
      summary: Retrieves newest public articles
      responses:
        '200':
          $ref: '#/components/schemas/Articles'
    post:
      tags:
        - Articles
      summary: Creates new article
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
      responses:
        '200':
          $ref: '#/components/schemas/Article'
        '201':
          $ref: '#/components/responses/201Error'
        '406':
          $ref: '#/components/responses/406Error'
    put:
      tags:
        - Articles
      summary: Updates existing article
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
      responses:
        '200':
          $ref: '#/components/schemas/Article'
        '201':
          $ref: '#/components/responses/201Error'
        '406':
          $ref: '#/components/responses/406Error'

  /article/mine:
    get:
      tags:
        - Articles
      summary: Retrieves articles of authenticated user

      responses:
        '200':
          $ref: '#/components/schemas/Articles'


  /article/slug/{slug}:
    get:
      tags:
        - Articles
      summary: Retrieves article based on slug
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/schemas/Article'
        '404':
          $ref: '#/components/responses/404Error'
        '201':
          $ref: '#/components/responses/201Error'
  /article/id/{articleId}:
    get:
      tags:
        - Articles
      summary: Retrieves article based on id
      parameters:
        - name: articleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/schemas/Article'
        '404':
          $ref: '#/components/responses/404Error'
        '201':
          $ref: '#/components/responses/201Error'

components:
  responses:
    201Error:
      description: Unauthorized. Occurs if scope isn't high enough, entity isn't mutable or no authentication is available
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
    404Error:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
    406Error:
      description: Missing property or properties
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
  schemas:
    Article:
      properties:
        id:
          type: string
        name:
          type: string
        slug:
          type: string
        teaser:
          type: string
        image_id:
          type: string
        author_user_id:
          type: string
        category_id:
          type: string
        keywords:
          type: string
        is_public:
          type: boolean
        publish_date:
          type: string
          format: date
        delete_date:
          type: string
          format: date
        article_content:
          type: array
          items:
            $ref: "#/components/schemas/ArticleContent"
        author:
          $ref: "#/components/schemas/Author"
    Articles:
      type: array
      items:
        $ref: "#/components/schemas/Article"
    ArticleContent:
      properties:
        id:
          type: string
        article_id:
          type: string
        sort:
          type: integer
        content_type:
          type: string
          enum: [markdown,html,img]
        content:
          type: string
        html:
          type: string
          format: html
    Author:
      properties:
        id:
          type: string
        customer_id:
          type: string
        user_type:
          type: string
          enum: [user, admin, seller]
        user_name:
          type: string
        image_id:
          type: string
        image:
          $ref: "#/components/schemas/Image"
    Image:
      properties:
        id:
          type: string
        format:
          type: string
        path:
          type: string


